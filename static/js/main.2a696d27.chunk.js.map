{"version":3,"sources":["components/ExcelData.js","components/RemiList.js","components/PlasmaList.js","components/RTPCRList.js","components/AmbuList.js","config.js","components/OxygenList.js","components/SurgicalList.js","components/CCCList.js","components/DoctorList.js","components/NursingList.js","components/EmergencyList.js","components/MedicalList.js","components/WebsiteList.js","components/FoodList.js","components/Filter.js","helpers/RemiSheet.js","helpers/PlasmaSheet.js","helpers/RTPCRSheet.js","helpers/AmbuSheet.js","helpers/OxygenSheet.js","helpers/SurgicalSheet.js","helpers/CCCSheet.js","helpers/DoctorSheet.js","helpers/NursingSheet.js","helpers/EmergencySheet.js","helpers/MedicalSheet.js","helpers/WebsiteSheet.js","helpers/FoodSheet.js","App.js","reportWebVitals.js","index.js"],"names":["ExcelData","props","data","columns","DataTable","border","background","header","body","margin","resizeable","sortable","pin","property","Text","size","RemiList","Box","PlasmaList","RTPCRList","AmbuList","apiKey","spreadsheetId","discoveryDocs","OxygenList","SurgicalList","CCCList","DoctorList","NursingList","EmergencyList","MedicalList","render","datum","Anchor","href","website","label","WebsiteList","FoodList","filterItems","title","content","load","callback","window","gapi","client","sheets","spreadsheets","values","get","config","range","then","response","remi","result","map","rem","id","city","org","contact","status","remarks","verified_on","moment","fromNow","error","platform","person","time","home","rtpcr","ctscan","rapid","name","type","timings","timing","address","service","area","purpose","details","charges","ld","foodfor","conditions","Loading","direction","justify","pad","Spinner","side","color","style","Filter","useState","cities","setCities","setCity","setData","filteredData","setFilteredData","loading","setLoading","setError","filter","setFilter","initClient","init","console","log","onLoad","res","JSON","parse","stringify","x","v","i","a","indexOf","useEffectOnce","Select","value","options","onChange","option","find","placeholder","gfc_theme","global","font","family","menu","anchor","dark","light","weight","App","Grommet","theme","full","ResponsiveContext","Consumer","responsive","Header","align","gap","Nav","Menu","items","onClick","location","alignSelf","Footer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a696d27.chunk.js","sourcesContent":["import { DataTable } from \"grommet\";\r\n\r\nexport const ExcelData = (props) => {\r\n  const { data, columns } = props;\r\n  // const onLoad = (data, error) => {\r\n  //   if (data) {\r\n  //     const res = JSON.parse(JSON.stringify(data));\r\n  //     //console.log(remi);\r\n  //     setData(res);\r\n  //     // setCities(res.map((x) => x.city).filter((v, i, a) => a.indexOf(v) === i));\r\n  //   } else {\r\n  //     setError(error);\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <DataTable\r\n      border={true}\r\n      background={{\r\n        header: \"accent-1\",\r\n        body: [\"light\", \"light-3\"],\r\n      }}\r\n      margin={\"small\"}\r\n      resizeable={true}\r\n      sortable={true}\r\n      columns={columns}\r\n      data={data}\r\n      pin=\"header\"\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Box, Text } from \"grommet\";\r\nimport { ExcelData } from \"./ExcelData\";\r\n\r\nconst columns = [\r\n  {\r\n    property: \"id\",\r\n    header: <Text>#</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"city\",\r\n    header: <Text>City</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"org\",\r\n    header: <Text>Organization</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"contact\",\r\n    header: <Text>Contact</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"status\",\r\n    header: <Text>Status</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"remarks\",\r\n    header: <Text>Remarks</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"verified_on\",\r\n    header: <Text>Verified On</Text>,\r\n    //size: \"small\",\r\n  },\r\n];\r\n\r\nconst RemiList = (props) => {\r\n  const { data } = props;\r\n  return (\r\n    <Box>\r\n      <Text>\r\n        NOTE 1 - As per Govt of Gujarat guideline, the Remedesivir can now only\r\n        be availed through govt hospitals by private hospitals where patient is\r\n        admitted.\r\n      </Text>\r\n      <br />\r\n      <Text>\r\n        NOTE 2 - For Ahmedabad : Checklist for getting Remdesivir from SVP\r\n        Hospital in Ahmedabad.\r\n      </Text>\r\n      <Text>\r\n        1) Patient should be admitted on oxygen bed in Hospital with in AMC\r\n        limit. ✅\r\n      </Text>\r\n      <Text>\r\n        2) Doc1 - Hospital should have Valid C Form issued from AMC ✅\r\n      </Text>\r\n      <Text>\r\n        3) Doc2 - RTPCR report of Patient should be recent, not older than 15\r\n        days. ✅\r\n      </Text>\r\n      <Text>\r\n        4) Doc3 - Doctors should fill the format given on last page ✅\r\n      </Text>\r\n      <Text>\r\n        5) Doc4 - Hospital staff icard who will come for collection ✅\r\n      </Text>\r\n      <br />\r\n      <Text>\r\n        Send 📧 email to remdesivir.tossilamc@gmail.com with above mentioned 4\r\n        documents from hospital ID.\r\n      </Text>\r\n      <Text>If any documents are missing, application can be rejected.</Text>\r\n      <Text>Successful application will get appointment for collecting.</Text>\r\n      <br />\r\n      <ExcelData data={data} columns={columns} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default RemiList;\r\n","import React from \"react\";\r\nimport { Text } from \"grommet\";\r\nimport { ExcelData } from \"./ExcelData\";\r\n\r\nconst columns = [\r\n  {\r\n    property: \"id\",\r\n    header: <Text>#</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"city\",\r\n    header: <Text>City</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"platform\",\r\n    header: <Text>Platform</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"person\",\r\n    header: <Text>Contact Person</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"contact\",\r\n    header: <Text>Contact</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"remarks\",\r\n    header: <Text>Remarks</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"verified_on\",\r\n    header: <Text>Verified On</Text>,\r\n    size: \"small\",\r\n  },\r\n];\r\n\r\nconst PlasmaList = (props) => {\r\n  const { data } = props;\r\n  return <ExcelData data={data} columns={columns} />;\r\n};\r\n\r\nexport default PlasmaList;\r\n","import React from \"react\";\r\nimport { Text } from \"grommet\";\r\nimport { ExcelData } from \"./ExcelData\";\r\n\r\nconst columns = [\r\n  {\r\n    property: \"id\",\r\n    header: <Text>#</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"city\",\r\n    header: <Text>City</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"org\",\r\n    header: <Text>Organization</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"person\",\r\n    header: <Text>Person</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"contact\",\r\n    header: <Text>Contact</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"time\",\r\n    header: <Text>Time</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"home\",\r\n    header: <Text>Home Collection</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"rtpcr\",\r\n    header: <Text>RT-PCR</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"ctscan\",\r\n    header: <Text>CT Scan</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"rapid\",\r\n    header: <Text>Rapid Antigen</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"status\",\r\n    header: <Text>Status</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"remarks\",\r\n    header: <Text>Remarks</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"verified_on\",\r\n    header: <Text>Verified On</Text>,\r\n    //size: \"small\",\r\n  },\r\n];\r\n\r\nconst RTPCRList = (props) => {\r\n  const { data } = props;\r\n  return <ExcelData data={data} columns={columns} />;\r\n};\r\n\r\nexport default RTPCRList;\r\n","import React from \"react\";\r\nimport { Text } from \"grommet\";\r\nimport { ExcelData } from \"./ExcelData\";\r\n\r\nconst columns = [\r\n  {\r\n    property: \"id\",\r\n    header: <Text>#</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"city\",\r\n    header: <Text>City</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"org\",\r\n    header: <Text>Organization</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"person\",\r\n    header: <Text>Person</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"contact\",\r\n    header: <Text>Contact</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"time\",\r\n    header: <Text>Time</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"status\",\r\n    header: <Text>Status</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"remarks\",\r\n    header: <Text>Remarks</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"verified_on\",\r\n    header: <Text>Verified On</Text>,\r\n    //size: \"small\",\r\n  },\r\n];\r\n\r\nconst AmbuList = (props) => {\r\n  const { data } = props;\r\n  return <ExcelData data={data} columns={columns} />;\r\n};\r\n\r\nexport default AmbuList;\r\n","export default {\r\n  //prady\r\n  // apiKey: \"AIzaSyCAp-t_WKWx0sfpOM5_-5yeC9g-ZcrkWcI\",\r\n  // spreadsheetId: \"13EFowc_DLa9c9D4OeGK2X7bdQFPtVmfQf1EHpUmBM5w\",\r\n  //live\r\n  apiKey: \"AIzaSyCAp-t_WKWx0sfpOM5_-5yeC9g-ZcrkWcI\",\r\n  spreadsheetId: \"1ZyrYsowjk6PdC9N5yKBxMslI7FypoeIqDvlAYrqprL8\",\r\n  discoveryDocs: [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"]\r\n};","import React from \"react\";\r\nimport { load } from \"../helpers/OxygenSheet\";\r\nimport { Text } from \"grommet\";\r\nimport { ExcelData } from \"./ExcelData\";\r\n\r\nconst columns = [\r\n  {\r\n    property: \"id\",\r\n    header: <Text>#</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"city\",\r\n    header: <Text>City</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"org\",\r\n    header: <Text>Organization</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"name\",\r\n    header: <Text>Name</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"contact\",\r\n    header: <Text>Contact</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"type\",\r\n    header: <Text>Type</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"timings\",\r\n    header: <Text>Timings</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"status\",\r\n    header: <Text>Status</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"remarks\",\r\n    header: <Text>Remarks</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"verified_on\",\r\n    header: <Text>Verified On</Text>,\r\n    //size: \"small\",\r\n  },\r\n];\r\n\r\nconst OxygenList = (props) => {\r\n  const { data } = props;\r\n  return <ExcelData data={data} columns={columns} />;\r\n};\r\n\r\nexport default OxygenList;\r\n","import React from \"react\";\r\nimport { Text } from \"grommet\";\r\nimport { ExcelData } from \"./ExcelData\";\r\n\r\nconst columns = [\r\n  {\r\n    property: \"id\",\r\n    header: <Text>#</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"city\",\r\n    header: <Text>City</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"org\",\r\n    header: <Text>Organization</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"name\",\r\n    header: <Text>Name</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"contact\",\r\n    header: <Text>Contact</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"type\",\r\n    header: <Text>Type</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"timing\",\r\n    header: <Text>Timings</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"status\",\r\n    header: <Text>Status</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"remarks\",\r\n    header: <Text>Remarks</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"verified_on\",\r\n    header: <Text>Verified On</Text>,\r\n    //size: \"small\",\r\n  },\r\n];\r\n\r\nconst SurgicalList = (props) => {\r\n  const { data } = props;\r\n\r\n  return <ExcelData data={data} columns={columns} />;\r\n};\r\n\r\nexport default SurgicalList;\r\n","import React from \"react\";\r\nimport { Text } from \"grommet\";\r\nimport { ExcelData } from \"./ExcelData\";\r\n\r\nconst columns = [\r\n  {\r\n    property: \"id\",\r\n    header: <Text>#</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"city\",\r\n    header: <Text>City</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"org\",\r\n    header: <Text>Organization</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"address\",\r\n    header: <Text>Address</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"person\",\r\n    header: <Text>Person</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"contact\",\r\n    header: <Text>Contact</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"remarks\",\r\n    header: <Text>Remarks</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"status\",\r\n    header: <Text>Status</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"verified_on\",\r\n    header: <Text>Verified On</Text>,\r\n    //size: \"small\",\r\n  },\r\n];\r\n\r\nconst CCCList = (props) => {\r\n  const { data } = props;\r\n\r\n  return <ExcelData data={data} columns={columns} />;\r\n};\r\n\r\nexport default CCCList;\r\n","import React from \"react\";\r\nimport { Text } from \"grommet\";\r\nimport { ExcelData } from \"./ExcelData\";\r\n\r\nconst columns = [\r\n  {\r\n    property: \"id\",\r\n    header: <Text>#</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"city\",\r\n    header: <Text>City</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"name\",\r\n    header: <Text>Doctor</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"contact\",\r\n    header: <Text>Contact</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"service\",\r\n    header: <Text>Service</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"time\",\r\n    header: <Text>Time</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"verified_on\",\r\n    header: <Text>Verified On</Text>,\r\n    size: \"small\",\r\n  },\r\n];\r\n\r\nconst DoctorList = (props) => {\r\n  const { data } = props;\r\n  return <ExcelData data={data} columns={columns} />;\r\n};\r\n\r\nexport default DoctorList;\r\n","import React from \"react\";\r\n\r\nimport { Text } from \"grommet\";\r\nimport { ExcelData } from \"./ExcelData\";\r\n\r\nconst columns = [\r\n  {\r\n    property: \"id\",\r\n    header: <Text>#</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"city\",\r\n    header: <Text>City</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"org\",\r\n    header: <Text>Organization</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"name\",\r\n    header: <Text>Address</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"contact\",\r\n    header: <Text>Contact</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"status\",\r\n    header: <Text>Status</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"remarks\",\r\n    header: <Text>Remarks</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"verified_on\",\r\n    header: <Text>Verified On</Text>,\r\n    //size: \"small\",\r\n  },\r\n];\r\n\r\nconst NursingList = (props) => {\r\n  const { data } = props;\r\n\r\n  return <ExcelData data={data} columns={columns} />;\r\n};\r\n\r\nexport default NursingList;\r\n","import React from \"react\";\r\nimport { Text } from \"grommet\";\r\nimport { ExcelData } from \"./ExcelData\";\r\n\r\nconst columns = [\r\n  {\r\n    property: \"id\",\r\n    header: <Text>#</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"city\",\r\n    header: <Text>City</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"org\",\r\n    header: <Text>Organization</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"contact\",\r\n    header: <Text>Contact</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"service\",\r\n    header: <Text>Service</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"status\",\r\n    header: <Text>Status</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"remarks\",\r\n    header: <Text>Remarks</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"verified_on\",\r\n    header: <Text>Verified On</Text>,\r\n    size: \"small\",\r\n  },\r\n];\r\n\r\nconst EmergencyList = (props) => {\r\n  const { data } = props;\r\n\r\n  return <ExcelData data={data} columns={columns} />;\r\n};\r\n\r\nexport default EmergencyList;\r\n","import React from \"react\";\r\nimport { Text } from \"grommet\";\r\nimport { ExcelData } from \"./ExcelData\";\r\n\r\nconst columns = [\r\n  {\r\n    property: \"id\",\r\n    header: <Text>#</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"city\",\r\n    header: <Text>City</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"area\",\r\n    header: <Text>Area</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"name\",\r\n    header: <Text>Name</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"contact\",\r\n    header: <Text>Contact</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"remarks\",\r\n    header: <Text>Remarks</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"verified_on\",\r\n    header: <Text>Verified On</Text>,\r\n    size: \"small\",\r\n  },\r\n];\r\n\r\nconst MedicalList = (props) => {\r\n  const { data } = props;\r\n\r\n  return <ExcelData data={data} columns={columns} />;\r\n};\r\n\r\nexport default MedicalList;\r\n","import React from \"react\";\r\nimport { Anchor, Text } from \"grommet\";\r\nimport { ExcelData } from \"./ExcelData\";\r\n\r\nconst columns = [\r\n  {\r\n    property: \"id\",\r\n    header: <Text>#</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"city\",\r\n    header: <Text>City</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"website\",\r\n    header: <Text>Website</Text>,\r\n    render: (datum) => <Anchor href={datum.website} label=\"Tap Here\" />,\r\n  },\r\n  {\r\n    property: \"purpose\",\r\n    header: <Text>Purpose</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"details\",\r\n    header: <Text>Details</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"verified_on\",\r\n    header: <Text>Verified On</Text>,\r\n    size: \"small\",\r\n  },\r\n];\r\n\r\nconst WebsiteList = (props) => {\r\n  const { data } = props;\r\n  const remi = [\r\n    {\r\n      id: \"fetching...\",\r\n      city: \"fetching...\",\r\n      website: \"fetching...\",\r\n      purpose: \"fetching...\",\r\n      details: \"fetching...\",\r\n      verified_on: \"fetching...\",\r\n    },\r\n  ];\r\n\r\n  return <ExcelData data={data} columns={columns} />;\r\n};\r\n\r\nexport default WebsiteList;\r\n","import React from \"react\";\r\nimport { Text } from \"grommet\";\r\nimport { ExcelData } from \"./ExcelData\";\r\n\r\nconst columns = [\r\n  {\r\n    property: \"id\",\r\n    header: <Text>#</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"city\",\r\n    header: <Text>City</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"area\",\r\n    header: <Text>Area Covered</Text>,\r\n    //size: \"large\",\r\n  },\r\n  {\r\n    property: \"org\",\r\n    header: <Text>Organization</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"charges\",\r\n    header: <Text>Charges</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"ld\",\r\n    header: <Text>Lunch/Dinner</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"person\",\r\n    header: <Text>Contact Person</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"contact\",\r\n    header: <Text>Contact Number</Text>,\r\n    //size: \"small\",\r\n  },\r\n  {\r\n    property: \"foodfor\",\r\n    header: <Text>Food For?</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"conditions\",\r\n    header: <Text>Conditions</Text>,\r\n    size: \"small\",\r\n  },\r\n  {\r\n    property: \"verified_on\",\r\n    header: <Text>Verified On</Text>,\r\n    //size: \"small\",\r\n  },\r\n];\r\n\r\nconst FoodList = (props) => {\r\n  const { data } = props;\r\n\r\n  return <ExcelData data={data} columns={columns} />;\r\n};\r\n\r\nexport default FoodList;\r\n","import { Box, Select, Spinner } from \"grommet\";\r\nimport RemiList from \"./RemiList\";\r\nimport PlasmaList from \"./PlasmaList\";\r\nimport RTPCRList from \"./RTPCRList\";\r\nimport AmbList from \"./AmbuList\";\r\nimport OxygenList from \"./OxygenList\";\r\nimport SurgicalList from \"./SurgicalList\";\r\nimport CCCList from \"./CCCList\";\r\nimport DoctorList from \"./DoctorList\";\r\nimport NursingList from \"./NursingList\";\r\nimport EmergencyList from \"./EmergencyList\";\r\nimport MedicalList from \"./MedicalList\";\r\nimport WebsiteList from \"./WebsiteList\";\r\nimport FoodList from \"./FoodList\";\r\nimport { useState } from \"react\";\r\nimport { useEffectOnce } from \"react-use\";\r\nimport config from \"../config\";\r\nimport { load as RemiLoad } from \"../helpers/RemiSheet\";\r\nimport { load as PlasmaLoad } from \"../helpers/PlasmaSheet\";\r\nimport { load as RTPCRLoad } from \"../helpers/RTPCRSheet\";\r\nimport { load as AmbuLoad } from \"../helpers/AmbuSheet\";\r\nimport { load as OxygenLoad } from \"../helpers/OxygenSheet\";\r\nimport { load as SurgicalLoad } from \"../helpers/SurgicalSheet\";\r\nimport { load as CCCLoad } from \"../helpers/CCCSheet\";\r\nimport { load as DoctorLoad } from \"../helpers/DoctorSheet\";\r\nimport { load as NursingLoad } from \"../helpers/NursingSheet\";\r\nimport { load as EmergencyLoad } from \"../helpers/EmergencySheet\";\r\nimport { load as MedicalLoad } from \"../helpers/MedicalSheet\";\r\nimport { load as WebSiteLoad } from \"../helpers/WebsiteSheet\";\r\nimport { load as FoodLoad } from \"../helpers/FoodSheet\";\r\n\r\nconst filterItems = [\r\n  {\r\n    title: \"Remedesivir\",\r\n    content: (data) => <RemiList data={data} />,\r\n    load: RemiLoad,\r\n  },\r\n  {\r\n    title: \"Plasma Support\",\r\n    content: (data) => <PlasmaList data={data} />,\r\n    load: PlasmaLoad,\r\n  },\r\n  {\r\n    title: \"COVID19 Reports\",\r\n    content: (data) => <RTPCRList data={data} />,\r\n    load: RTPCRLoad,\r\n  },\r\n  {\r\n    title: \"Ambulance\",\r\n    content: (data) => <AmbList data={data} />,\r\n    load: AmbuLoad,\r\n  },\r\n  {\r\n    title: \"Oxygen Sources\",\r\n    content: (data) => <OxygenList data={data} />,\r\n    load: OxygenLoad,\r\n  },\r\n  {\r\n    title: \"Surgical Equipments\",\r\n    content: (data) => <SurgicalList data={data} />,\r\n    load: SurgicalLoad,\r\n  },\r\n  {\r\n    title: \"Covid Care Center\",\r\n    content: (data) => <CCCList data={data} />,\r\n    load: CCCLoad,\r\n  },\r\n  {\r\n    title: \"Doctor On Call\",\r\n    content: (data) => <DoctorList data={data} />,\r\n    load: DoctorLoad,\r\n  },\r\n  {\r\n    title: \"Nursing Staff\",\r\n    content: (data) => <NursingList data={data} />,\r\n    load: NursingLoad,\r\n  },\r\n  {\r\n    title: \"Emergency Number\",\r\n    content: (data) => <EmergencyList data={data} />,\r\n    load: EmergencyLoad,\r\n  },\r\n  {\r\n    title: \"Medical Store\",\r\n    content: (data) => <MedicalList data={data} />,\r\n    load: MedicalLoad,\r\n  },\r\n  {\r\n    title: \"Websites\",\r\n    content: (data) => <WebsiteList data={data} />,\r\n    load: WebSiteLoad,\r\n  },\r\n  {\r\n    title: \"Food For Patients\",\r\n    content: (data) => <FoodList data={data} />,\r\n    load: FoodLoad,\r\n  },\r\n];\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <Box direction=\"row\" justify=\"center\" pad=\"medicum\">\r\n      <Spinner\r\n        border={[\r\n          {\r\n            side: \"all\",\r\n            color: \"brand\",\r\n            size: \"medium\",\r\n            style: \"dotted\",\r\n          },\r\n        ]}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const Filter = () => {\r\n  const [cities, setCities] = useState([]);\r\n  const [city, setCity] = useState(\"All\");\r\n  const [data, setData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [filter, setFilter] = useState(filterItems[0].title);\r\n\r\n  const initClient = () => {\r\n    window.gapi.client\r\n      .init({\r\n        apiKey: config.apiKey,\r\n        discoveryDocs: config.discoveryDocs,\r\n      })\r\n      .then(() => {\r\n        console.log(\"Sheet Initiated...\");\r\n        filterItems[0].load(onLoad);\r\n      });\r\n  };\r\n\r\n  const onLoad = (data, error) => {\r\n    setLoading(true);\r\n    if (data) {\r\n      const res = JSON.parse(JSON.stringify(data));\r\n      setData(res);\r\n      setFilteredData(res);\r\n      setCities([\r\n        city,\r\n        ...res.map((x) => x.city).filter((v, i, a) => a.indexOf(v) === i),\r\n      ]);\r\n    } else {\r\n      setError(error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffectOnce(() => {\r\n    window.gapi.load(\"client\", initClient);\r\n  });\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box direction=\"row\" pad=\"medium\">\r\n        <Box pad=\"medium\">\r\n          <Select\r\n            id=\"title-filter\"\r\n            name=\"title-filter\"\r\n            value={filter}\r\n            options={filterItems.map((x) => x.title)}\r\n            onChange={({ option }) => {\r\n              setLoading(true);\r\n              setFilter(option);\r\n              setCity(\"All\");\r\n              filterItems.find((x) => x.title === option).load(onLoad);\r\n            }}\r\n          />\r\n        </Box>\r\n        <Box pad=\"medium\">\r\n          {loading ? null : (\r\n            <Select\r\n              id=\"select-city\"\r\n              name=\"select-city\"\r\n              value={city}\r\n              placeholder={\"Select City\"}\r\n              options={cities}\r\n              onChange={({ option }) => {\r\n                setCity(option);\r\n                if (option === \"All\") {\r\n                  setFilteredData(data);\r\n                } else {\r\n                  setFilteredData(data.filter((x) => x.city === option));\r\n                }\r\n              }}\r\n            />\r\n          )}\r\n        </Box>\r\n      </Box>\r\n\r\n      {loading ? (\r\n        <Loading />\r\n      ) : (\r\n        <Box direction=\"row\" pad=\"medium\">\r\n          {filterItems.find((x) => x.title === filter).content(filteredData)}\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import config from \"../config\";\r\nimport moment from \"moment\";\r\n\r\nexport function load(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: config.spreadsheetId,\r\n        range: \"Remedesivir!A5:H\",\r\n      })\r\n      .then(\r\n        (response) => {\r\n          const data = response.result.values;\r\n\r\n          const remi =\r\n            data.map((rem) => ({\r\n              id: rem[0],\r\n              city: rem[1],\r\n              org: rem[2],\r\n              contact: rem[3],\r\n              status: rem[4],\r\n              remarks: rem[5],\r\n              verified_on: moment(rem[7], \"DD-MM-YYYY HH:mm:ss\").fromNow(),\r\n            })) || [];\r\n\r\n          callback(remi);\r\n        },\r\n        (response) => {\r\n          callback(\r\n            false,\r\n            response.result.error,\r\n            \"Error in fetching Remedesivir Supplier Data.\"\r\n          );\r\n        }\r\n      );\r\n  });\r\n}\r\n","import config from \"../config\";\r\nimport moment from \"moment\";\r\n\r\nexport function load(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: config.spreadsheetId,\r\n        range: \"Plasma Support!A3:H\",\r\n      })\r\n      .then(\r\n        (response) => {\r\n          const data = response.result.values;\r\n\r\n          const remi =\r\n            data.map((rem) => ({\r\n              id: rem[0],\r\n              city: rem[1],\r\n              platform: rem[2],\r\n              person: rem[3],\r\n              contact: rem[4],\r\n              remarks: rem[5],\r\n              verified_on: moment(rem[7], \"DD-MM-YYYY HH:mm:ss\").fromNow(),\r\n            })) || [];\r\n\r\n          callback(remi);\r\n        },\r\n        (response) => {\r\n          callback(\r\n            false,\r\n            response.result.error,\r\n            \"Error in fetching Plasma Support Data.\"\r\n          );\r\n        }\r\n      );\r\n  });\r\n}\r\n","import config from \"../config\";\r\nimport moment from \"moment\";\r\n\r\nexport function load(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: config.spreadsheetId,\r\n        range: \"COVID19 Reports!A3:N\",\r\n      })\r\n      .then(\r\n        (response) => {\r\n          const data = response.result.values;\r\n\r\n          const remi =\r\n            data.map((rem) => ({\r\n              id: rem[0],\r\n              city: rem[1],\r\n              org: rem[2],\r\n              person: rem[3],\r\n              contact: rem[4],\r\n              time: rem[5],\r\n              status: rem[6],\r\n              remarks: rem[7],\r\n              verified_on: moment(rem[9], \"DD-MM-YYYY HH:mm:ss\").fromNow(),\r\n              home: rem[10],\r\n              rtpcr: rem[11],\r\n              ctscan: rem[12],\r\n              rapid: rem[13],\r\n            })) || [];\r\n\r\n          callback(remi);\r\n        },\r\n        (response) => {\r\n          callback(\r\n            false,\r\n            response.result.error,\r\n            \"Error in fetching RT-PCR Data.\"\r\n          );\r\n        }\r\n      );\r\n  });\r\n}\r\n","import config from \"../config\";\r\nimport moment from \"moment\";\r\n\r\nexport function load(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: config.spreadsheetId,\r\n        range: \"Ambulance!A3:J\",\r\n      })\r\n      .then(\r\n        (response) => {\r\n          const data = response.result.values;\r\n\r\n          const remi =\r\n            data.map((rem) => ({\r\n              id: rem[0],\r\n              city: rem[1],\r\n              org: rem[2],\r\n              person: rem[3],\r\n              contact: rem[4],\r\n              time: rem[5],\r\n              status: rem[6],\r\n              remarks: rem[7],\r\n              verified_on: moment(rem[9], \"DD-MM-YYYY HH:mm:ss\").fromNow(),\r\n            })) || [];\r\n\r\n          callback(remi);\r\n        },\r\n        (response) => {\r\n          callback(\r\n            false,\r\n            response.result.error,\r\n            \"Error in fetching Ambulance Data.\"\r\n          );\r\n        }\r\n      );\r\n  });\r\n}\r\n","import config from \"../config\";\r\nimport moment from \"moment\";\r\n\r\nexport function load(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: config.spreadsheetId,\r\n        range: \"Oxygen Sources!A3:K\",\r\n      })\r\n      .then(\r\n        (response) => {\r\n          const data = response.result.values;\r\n\r\n          const remi =\r\n            data.map((rem) => ({\r\n              id: rem[0],\r\n              city: rem[1],\r\n              org: rem[2],\r\n              name: rem[3],\r\n              contact: rem[4],\r\n              type: rem[5],\r\n              timings: rem[6],\r\n              status: rem[7],\r\n              remarks: rem[8],\r\n              verified_on: moment(rem[10], \"DD-MM-YYYY HH:mm:ss\").fromNow(),\r\n            })) || [];\r\n\r\n          callback(remi);\r\n        },\r\n        (response) => {\r\n          callback(\r\n            false,\r\n            response.result.error,\r\n            \"Error in fetching Oxygen Data.\"\r\n          );\r\n        }\r\n      );\r\n  });\r\n}\r\n","import config from \"../config\";\r\nimport moment from \"moment\";\r\n\r\nexport function load(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: config.spreadsheetId,\r\n        range: \"Surgical Equipments!A3:K\",\r\n      })\r\n      .then(\r\n        (response) => {\r\n          const data = response.result.values;\r\n\r\n          const remi =\r\n            data.map((rem) => ({\r\n              id: rem[0],\r\n              city: rem[1],\r\n              org: rem[2],\r\n              name: rem[3],\r\n              contact: rem[4],\r\n              type: rem[5],\r\n              timing: rem[6],\r\n              status: rem[7],\r\n              remarks: rem[8],\r\n              verified_on: moment(rem[10], \"DD-MM-YYYY HH:mm:ss\").fromNow(),\r\n            })) || [];\r\n\r\n          callback(remi);\r\n        },\r\n        (response) => {\r\n          callback(\r\n            false,\r\n            response.result.error,\r\n            \"Error in fetching Surgical Equipments Data.\"\r\n          );\r\n        }\r\n      );\r\n  });\r\n}\r\n","import config from \"../config\";\r\nimport moment from \"moment\";\r\n\r\nexport function load(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: config.spreadsheetId,\r\n        range: \"Covid Care Center!A3:J\",\r\n      })\r\n      .then(\r\n        (response) => {\r\n          const data = response.result.values;\r\n\r\n          const remi =\r\n            data.map((rem) => ({\r\n              id: rem[0],\r\n              city: rem[1],\r\n              org: rem[2],\r\n              address: rem[3],\r\n              person: rem[4],\r\n              contact: rem[5],\r\n              remarks: rem[6],\r\n              status: rem[7],\r\n              verified_on: moment(rem[9], \"DD-MM-YYYY HH:mm:ss\").fromNow(),\r\n            })) || [];\r\n\r\n          callback(remi);\r\n        },\r\n        (response) => {\r\n          callback(\r\n            false,\r\n            response.result.error,\r\n            \"Error in fetching Covid Care Center Data.\"\r\n          );\r\n        }\r\n      );\r\n  });\r\n}\r\n","import config from \"../config\";\r\nimport moment from \"moment\";\r\n\r\nexport function load(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: config.spreadsheetId,\r\n        range: \"Doctor on Call!A3:H\",\r\n      })\r\n      .then(\r\n        (response) => {\r\n          const data = response.result.values;\r\n\r\n          const remi =\r\n            data.map((rem) => ({\r\n              id: rem[0],\r\n              city: rem[1],\r\n              name: rem[2],\r\n              contact: rem[3],\r\n              service: rem[4],\r\n              time: rem[5],\r\n              verified_on: moment(rem[7], \"DD-MM-YYYY HH:mm:ss\").fromNow(),\r\n            })) || [];\r\n\r\n          callback(remi);\r\n        },\r\n        (response) => {\r\n          callback(\r\n            false,\r\n            response.result.error,\r\n            \"Error in fetching Doctor Data.\"\r\n          );\r\n        }\r\n      );\r\n  });\r\n}\r\n","import config from \"../config\";\r\nimport moment from \"moment\";\r\n\r\nexport function load(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: config.spreadsheetId,\r\n        range: \"Nursing Staff!A3:I\",\r\n      })\r\n      .then(\r\n        (response) => {\r\n          const data = response.result.values;\r\n\r\n          const remi =\r\n            data.map((rem) => ({\r\n              id: rem[0],\r\n              city: rem[1],\r\n              org: rem[2],\r\n              name: rem[3],\r\n              contact: rem[4],\r\n              status: rem[5],\r\n              remarks: rem[6],\r\n              verified_on: moment(rem[8], \"DD-MM-YYYY HH:mm:ss\").fromNow(),\r\n            })) || [];\r\n\r\n          callback(remi);\r\n        },\r\n        (response) => {\r\n          callback(\r\n            false,\r\n            response.result.error,\r\n            \"Error in fetching Nursing Data.\"\r\n          );\r\n        }\r\n      );\r\n  });\r\n}\r\n","import config from \"../config\";\r\nimport moment from \"moment\";\r\n\r\nexport function load(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: config.spreadsheetId,\r\n        range: \"Emergency Number!A3:I\",\r\n      })\r\n      .then(\r\n        (response) => {\r\n          const data = response.result.values;\r\n\r\n          const remi =\r\n            data.map((rem) => ({\r\n              id: rem[0],\r\n              city: rem[1],\r\n              org: rem[2],\r\n              contact: rem[3],\r\n              service: rem[4],\r\n              status: rem[5],\r\n              remarks: rem[6],\r\n              verified_on: moment(rem[8], \"DD-MM-YYYY HH:mm:ss\").fromNow(),\r\n            })) || [];\r\n\r\n          callback(remi);\r\n        },\r\n        (response) => {\r\n          callback(\r\n            false,\r\n            response.result.error,\r\n            \"Error in fetching Emergency Contact Data.\"\r\n          );\r\n        }\r\n      );\r\n  });\r\n}\r\n","import config from \"../config\";\r\nimport moment from \"moment\";\r\n\r\nexport function load(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: config.spreadsheetId,\r\n        range: \"Medical Store!A3:H\",\r\n      })\r\n      .then(\r\n        (response) => {\r\n          const data = response.result.values;\r\n\r\n          const remi =\r\n            data.map((rem) => ({\r\n              id: rem[0],\r\n              city: rem[1],\r\n              area: rem[2],\r\n              name: rem[3],\r\n              contact: rem[4],\r\n              remarks: rem[5],\r\n              verified_on: moment(rem[7], \"DD-MM-YYYY HH:mm:ss\").fromNow(),\r\n            })) || [];\r\n\r\n          callback(remi);\r\n        },\r\n        (response) => {\r\n          callback(\r\n            false,\r\n            response.result.error,\r\n            \"Error in fetching Medical Store Data.\"\r\n          );\r\n        }\r\n      );\r\n  });\r\n}\r\n","import config from \"../config\";\r\nimport moment from \"moment\";\r\n\r\nexport function load(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: config.spreadsheetId,\r\n        range: \"Websites for COVID19!A3:G\",\r\n      })\r\n      .then(\r\n        (response) => {\r\n          const data = response.result.values;\r\n\r\n          const remi =\r\n            data.map((rem) => ({\r\n              id: rem[0],\r\n              city: rem[1],\r\n              website: rem[2],\r\n              purpose: rem[3],\r\n              details: rem[4],\r\n              verified_on: moment(rem[6], \"DD-MM-YYYY HH:mm:ss\").fromNow(),\r\n            })) || [];\r\n\r\n          callback(remi);\r\n        },\r\n        (response) => {\r\n          callback(\r\n            false,\r\n            response.result.error,\r\n            \"Error in fetching Websites for COVID 19 Data.\"\r\n          );\r\n        }\r\n      );\r\n  });\r\n}\r\n","import config from \"../config\";\r\nimport moment from \"moment\";\r\n\r\nexport function load(callback) {\r\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\r\n    window.gapi.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: config.spreadsheetId,\r\n        range: \"Food For Covid Patients!A3:L\",\r\n      })\r\n      .then(\r\n        (response) => {\r\n          const data = response.result.values;\r\n\r\n          const remi =\r\n            data.map((rem) => ({\r\n              id: rem[0],\r\n              city: rem[1],\r\n              area: rem[2],\r\n              org: rem[3],\r\n              charges: rem[4],\r\n              ld: rem[5],\r\n              person: rem[6],\r\n              contact: rem[7],\r\n              foodfor: rem[8],\r\n              conditions: rem[9],\r\n              verified_on: moment(rem[11], \"DD-MM-YYYY HH:mm:ss\").fromNow(),\r\n            })) || [];\r\n\r\n          callback(remi);\r\n        },\r\n        (response) => {\r\n          callback(\r\n            false,\r\n            response.result.error,\r\n            \"Error in fetching Food Data.\"\r\n          );\r\n        }\r\n      );\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Anchor,\r\n  Box,\r\n  Footer,\r\n  Grommet,\r\n  Header,\r\n  Menu,\r\n  Nav,\r\n  ResponsiveContext,\r\n  Text,\r\n} from \"grommet\";\r\nimport { Filter } from \"./components/Filter\";\r\n\r\nconst gfc_theme = {\r\n  global: {\r\n    font: {\r\n      family: \"Roboto\",\r\n    },\r\n  },\r\n  menu: {\r\n    background: \"brand\",\r\n  },\r\n  anchor: {\r\n    color: {\r\n      dark: \"white\",\r\n      light: \"white\",\r\n    },\r\n    weight: \"normal\",\r\n  },\r\n};\r\n\r\nconst App = () => {\r\n  return (\r\n    <Grommet theme={gfc_theme} full>\r\n      <ResponsiveContext.Consumer>\r\n        {() => (\r\n          <Box>\r\n            <ResponsiveContext.Consumer>\r\n              {(responsive) =>\r\n                responsive === \"small\" ? (\r\n                  <Header background=\"brand\" pad=\"medium\" direction=\"column\">\r\n                    <Box direction=\"row\" align=\"center\" gap=\"small\">\r\n                      <Anchor\r\n                        size=\"large\"\r\n                        weight=\"normal\"\r\n                        href=\"https://www.gujaratcovidsupport.org\"\r\n                      >\r\n                        #GujaratCovidSupport\r\n                      </Anchor>\r\n                    </Box>\r\n                    <Nav direction=\"column\" align=\"center\">\r\n                      <Menu\r\n                        label=\"Donate Plasma\"\r\n                        items={[\r\n                          {\r\n                            label: \"English\",\r\n                            onClick: () => {\r\n                              window.location.href =\r\n                                \"https://forms.gle/pdgsP6avND8W2xER8\";\r\n                            },\r\n                          },\r\n                          {\r\n                            label: \"ગુજરાતી\",\r\n                            onClick: () => {\r\n                              window.location.href =\r\n                                \"https://forms.gle/hxcsJD3opaCks47e7\";\r\n                            },\r\n                          },\r\n                        ]}\r\n                      />\r\n                      <Anchor\r\n                        alignSelf=\"center\"\r\n                        weight=\"normal\"\r\n                        href=\"https://www.gujaratcovidsupport.org/donate/\"\r\n                        label=\"Donate Funds\"\r\n                      />\r\n                      <Anchor\r\n                        alignSelf=\"center\"\r\n                        weight=\"normal\"\r\n                        href=\"https://forms.gle/YXv43foVgYFHsD17A\"\r\n                        label=\"Volunteer\"\r\n                      />\r\n                    </Nav>\r\n                  </Header>\r\n                ) : (\r\n                  <Header background=\"brand\" pad=\"small\">\r\n                    <Box direction=\"row\" align=\"center\" gap=\"small\">\r\n                      <Anchor\r\n                        size=\"large\"\r\n                        weight=\"normal\"\r\n                        href=\"https://www.gujaratcovidsupport.org\"\r\n                      >\r\n                        #GujaratCovidSupport\r\n                      </Anchor>\r\n                    </Box>\r\n                    <Nav direction=\"row\">\r\n                      <Menu\r\n                        label=\"Donate Plasma\"\r\n                        items={[\r\n                          {\r\n                            label: \"English\",\r\n                            onClick: () => {\r\n                              window.location.href =\r\n                                \"https://forms.gle/pdgsP6avND8W2xER8\";\r\n                            },\r\n                          },\r\n                          {\r\n                            label: \"ગુજરાતી\",\r\n                            onClick: () => {\r\n                              window.location.href =\r\n                                \"https://forms.gle/hxcsJD3opaCks47e7\";\r\n                            },\r\n                          },\r\n                        ]}\r\n                      />\r\n                      <Anchor\r\n                        alignSelf=\"center\"\r\n                        weight=\"normal\"\r\n                        href=\"https://www.gujaratcovidsupport.org/donate/\"\r\n                        label=\"Donate Funds\"\r\n                      />\r\n                      <Anchor\r\n                        alignSelf=\"center\"\r\n                        weight=\"normal\"\r\n                        href=\"https://forms.gle/YXv43foVgYFHsD17A\"\r\n                        label=\"Volunteer\"\r\n                      />\r\n                    </Nav>\r\n                  </Header>\r\n                )\r\n              }\r\n            </ResponsiveContext.Consumer>\r\n            <Filter />\r\n            <Footer background=\"brand\" pad=\"medium\" direction=\"column\">\r\n              <Text>\r\n                Disclaimer: This is volunteer run effort. Portal shares list of\r\n                verified contacts for different COVID-19 help and services.\r\n                Although team verifies each contact while adding it to the\r\n                portal, it may be very much possible that help resource is out\r\n                of supply. We suggest users to refer 'Verified On' column in\r\n                every tab to judge freshness of data.\r\n              </Text>\r\n              <Anchor\r\n                weight=\"normal\"\r\n                href=\"https://forms.gle/YXv43foVgYFHsD17A\"\r\n                label=\"Should you have any feedback or query, please contact us here.\"\r\n              />\r\n            </Footer>\r\n          </Box>\r\n        )}\r\n      </ResponsiveContext.Consumer>\r\n    </Grommet>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}